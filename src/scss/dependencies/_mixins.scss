/**
 * Apply the micro clearfix to an element
 *
 * @mixin
 * @section Mixins
 * @example
 *  @include clearfix;
 */
@mixin clearfix {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}

/**
 * Apply text overflow ellipsis and its necessary styles.
 * @mixin
 * @section Mixins
 * @example
 *  @include text-ellipsis;
 */
@mixin text-ellipsis {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

/**
 * Put separator between any items this mixin is applied to (usually li's) by addingt content to the `::after` pseudo-element and positioning it with margins and paddings.
 * @mixin
 * @section Mixins
 * @param $margins 6px by default, the margin between element and separator
 * @param $separator-color Color of the text, defaults to `inherit`
 * @param $separator The separator that is added, defaults to `|`
 * @param $font-size How large the separator should be, defaults to `inherit`
 * @param $inline-block-fix Boolean to decide whether the inline block fix needs to be applied, defaults to `true`
 *
 * @example
 *  @include separator;
 *  @include separator($separator: '+', $font-size: 1.25em);
 */
@mixin separator($margins: rem-calc(6), $separator-color: inherit, $separator: '|', $font-size: inherit, $inline-block-fix: true) {
  display: inline-block;

  margin-left: $margins;

  @if $inline-block-fix {
    margin-right: -4px; // fix inline-block white space
  }

  &:first-child {
    margin-left: 0;
  }

  &::after {
    padding-left: $margins;

    color: $separator-color;
    font-size: $font-size;

    content: $separator;
  }

  &:last-child {
    margin-right: 0; // last element should have the usual white space

    &::after {
      padding-left: 0;

      content: '';
    }
  }
}

/**
 * Create a triangle, very configurable.
 * @mixin
 * @section Mixins
 * @param $pos Which edge to create the triangle on (allowed are `'top'`, `'right'`, `'bottom'` or `'left'`.)
 * @param $offset The offset from the origin (top or left) on the edge
 * @param $center-offset Adjust center for use with before of after pseudo-elements (negative or positive values allowed, negatives pull, posish further)
 * @param $direction Direction of the triangle (`'in'` or `'out'`)
 * @param $width Length of the triangle's base
 * @param $height Height of the triangle
 * @param $color Color of the triangle
 * @param $type Type of the pseudo-element the triangle gets created with (`'before'` or `'after'`)
 *
 * @example
 *  @include triangle('right', 50%);
 *  @include triangle($direction: 'in');
 */
@mixin triangle($pos: 'left', $offset: 0, $center-offset: null, $direction: 'out', $width: 1rem, $height: $width, $color: currentColor, $type: 'after') {
  @if($center-offset) {
    $center-adjust: $width / 2 + $center-offset;
  } @else {
    $center-adjust: $width / 2;
  }

  position: relative;

  &:#{$type} {
    position: absolute;

    // Reset position and offsets
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;

    $h-offset: 0;
    $v-offset: 0;

    content: '';

    z-index: 1;

    // Triangle: down
    @if ((($pos == 'top') and ($direction == 'in')) or ($pos == 'bottom') and ($direction == 'out')) {
      border-top: $height solid $color;
      border-right: $width / 2 solid transparent;
      border-bottom: 0;
      border-left: $width / 2 solid transparent;

      $v-offset: if($direction == 'in', 0, -$height);
    }

    // Triangle: up
    @if ((($pos == 'top') and ($direction == 'out')) or ($pos == 'bottom') and ($direction == 'in')) {
      border-top: 0;
      border-right: $width / 2 solid transparent;
      border-bottom: $height solid $color;
      border-left: $width / 2 solid transparent;

      $v-offset: if($direction == 'in', 0, -$height);
    }

    // Triangle: right
    @if ((($pos == 'left') and ($direction == 'in')) or ($pos == 'right') and ($direction == 'out')) {
      border-top: $width / 2 solid transparent;
      border-right: 0;
      border-bottom: $width / 2 solid transparent;
      border-left: $height solid $color;

      $h-offset: if($direction == 'in', 0, -$height);
    }

    // Triangle: left
    @if ((($pos == 'left') and ($direction == 'out')) or ($pos == 'right') and ($direction == 'in')) {
      border-top: $width / 2 solid transparent;
      border-right: $height solid $color;
      border-bottom: $width / 2 solid transparent;
      border-left: 0;

      $h-offset: if($direction == 'in', 0, -$height);
    }

    @if ($pos == 'top') {
      top: $v-offset;
      left: if($offset == 'center', calc(50% - #{$center-adjust}), $offset);
    } @else if ($pos == 'bottom') {
      bottom: $v-offset;
      left: if($offset == 'center', calc(50% - #{$center-adjust}), $offset);
    } @else if ($pos == 'left') {
      top: if($offset == 'center', calc(50% - #{$center-adjust}), $offset);
      left: $h-offset;
    } @else if ($pos == 'right') {
      top: if($offset == 'center', calc(50% - #{$center-adjust}), $offset);
      right: $h-offset;
    }
  }
}

/**
 * Use flexbox to center an elements children
 * @mixin
 * @section Mixins
 * @param $vertical Boolean, center vertically?
 * @param $horizontal Boolean, center horizontally?
 */
@mixin flex-center-children($vertical: true, $horizontal: true) {
  display: flex;
  @if ($vertical) {
    align-items: center;
  }

  @if ($horizontal) {
    justify-content: center;
  }
}

/**
 * Some cool hover transitions
 * @mixin
 * @section Mixins
 * @param $property The property you want to transition
 * @param $duration Transition duration
 * @param $timing-function Timing function
 * @param $timing-function-hover Timing function on hover
 * @param $delay Transition delay
 */
@mixin hover-transition($property: 'background-color', $duration: .3s, $timing-function: 'ease-in', $timing-function-hover: 'ease-out', $delay: null) {
  transition-duration: #{$duration};
  transition-property: #{$property};
  transition-timing-function: #{$timing-function};

  @if ($delay) {
    transition-delay: #{$delay};
  }

  @if ($timing-function-hover != $timing-function) {
    &:hover,
    &:active,
    &:focus {
      transition-timing-function: #{$timing-function-hover};
    }
  }
}

/**
 * Fluid typography. Go from your mobile font size to the desktop font size fluidly. Let it grow by the power of viewport units.
 * @mixin
 * @section Mixins
 * @param $properties All properties you want to assign these values to
 * @param $min-vw     The min-width for fluid type (scale from screens above this width)
 * @param $max-vw     The max-width for fluid type (stop growing when this width is reached)
 * @param $min-value  The minimum value assinged
 * @param $max-value  The maximum value assigned
 */
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    // set the base minimum value
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    // here we are fluid
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    // fixed max value here
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}
